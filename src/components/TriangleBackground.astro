---
// Astro component version
---

<canvas id='triangle-canvas' class='triangle-background'></canvas>

<style>
  .triangle-background {
    position: fixed;
    top: 0;
    left: 0;
    z-index: -1;
    filter: drop-shadow(0 0 20px #8b5cf6);
    width: 100vw;
    height: 100vh;
    pointer-events: none;
  }
</style>

<script>
  interface Triangle {
    x: number
    y: number
    size: number
    rotation: number
    opacity: number
    speed: number
    parallaxSpeed: number
    originalY: number
  }

  class TriangleBackground {
    private canvas: HTMLCanvasElement
    private ctx: CanvasRenderingContext2D
    private triangles: Triangle[] = []
    private mouse = { x: 0, y: 0 }
    private scrollY = 0
    private animationId: number | null = null

    constructor(canvas: HTMLCanvasElement) {
      this.canvas = canvas
      this.ctx = canvas.getContext('2d')!

      this.init()
      this.setupEventListeners()
      this.animate()
    }

    private init() {
      this.resize()
      this.initTriangles()
    }

    private resize() {
      this.canvas.width = window.innerWidth
      this.canvas.height = window.innerHeight
      // Reinitialize triangles to account for new canvas size
      this.initTriangles()
    }

    private interpolateColor(color1: string, color2: string, factor: number): string {
      // Convert hex to RGB
      const hex1 = color1.replace('#', '')
      const hex2 = color2.replace('#', '')

      const r1 = parseInt(hex1.substr(0, 2), 16)
      const g1 = parseInt(hex1.substr(2, 2), 16)
      const b1 = parseInt(hex1.substr(4, 2), 16)

      const r2 = parseInt(hex2.substr(0, 2), 16)
      const g2 = parseInt(hex2.substr(2, 2), 16)
      const b2 = parseInt(hex2.substr(4, 2), 16)

      // Interpolate
      const r = Math.round(r1 + (r2 - r1) * factor)
      const g = Math.round(g1 + (g2 - g1) * factor)
      const b = Math.round(b1 + (b2 - b1) * factor)

      // Convert back to hex
      return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`
    }

    private initTriangles() {
      this.triangles = []
      const triangleCount = Math.floor((this.canvas.width * this.canvas.height) / 15000)

      for (let i = 0; i < triangleCount; i++) {
        const y = Math.random() * this.canvas.height
        this.triangles.push({
          x: Math.random() * this.canvas.width,
          y: y,
          originalY: y,
          size: Math.random() * 20 + 10,
          rotation: Math.random() * 360,
          opacity: Math.random() * 0.4 + 0.2, // Higher base opacity for better glow visibility
          speed: Math.random() * 0.5 + 0.2,
          parallaxSpeed: Math.random() * 0.3 + 0.1, // Different parallax speeds for layered effect
        })
      }
    }

    private drawTriangle(triangle: Triangle) {
      this.ctx.save()
      this.ctx.translate(triangle.x, triangle.y)
      this.ctx.rotate((triangle.rotation * Math.PI) / 180)
      this.ctx.globalAlpha = triangle.opacity

      this.ctx.beginPath()
      this.ctx.moveTo(0, -triangle.size / 2)
      this.ctx.lineTo(-triangle.size / 2, triangle.size / 2)
      this.ctx.lineTo(triangle.size / 2, triangle.size / 2)
      this.ctx.closePath()

      // Purple gradient for triangles
      const gradient = this.ctx.createLinearGradient(
        -triangle.size / 2,
        -triangle.size / 2,
        triangle.size / 2,
        triangle.size / 2
      )
      gradient.addColorStop(0, '#8b5cf6')
      gradient.addColorStop(0.3, '#a855f7')
      gradient.addColorStop(0.6, '#c084fc')
      gradient.addColorStop(1, '#e879f9')

      this.ctx.fillStyle = gradient
      this.ctx.fill()

      this.ctx.strokeStyle = 'rgba(168, 85, 247, 0.6)'
      this.ctx.lineWidth = 1
      this.ctx.stroke()

      this.ctx.restore()
    }

    private animate = () => {
      // Create dynamic background gradient based on scroll position
      const scrollFactor = Math.min(this.scrollY / 1000, 1) // Darken over 1000px of scroll

      // Calculate darker colors based on scroll
      const baseColor1 = this.interpolateColor('#1d0035', '#0a0015', scrollFactor)
      const baseColor2 = this.interpolateColor('#2d0042', '#150020', scrollFactor)
      const baseColor3 = this.interpolateColor('#42004c', '#210025', scrollFactor)

      const gradient = this.ctx.createLinearGradient(0, 0, this.canvas.width, this.canvas.height)
      gradient.addColorStop(0, baseColor1)
      gradient.addColorStop(0.5, baseColor2)
      gradient.addColorStop(1, baseColor3)

      this.ctx.fillStyle = gradient
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)

      // Update and draw triangles
      this.triangles.forEach((triangle) => {
        // Apply parallax effect
        triangle.y = triangle.originalY - this.scrollY * triangle.parallaxSpeed

        const dx = this.mouse.x - triangle.x
        const dy = this.mouse.y - triangle.y
        const distance = Math.sqrt(dx * dx + dy * dy)
        const maxDistance = 200

        if (distance < maxDistance) {
          const influence = (maxDistance - distance) / maxDistance
          triangle.x += (dx / distance) * influence * 2
          // Reduce Y movement when parallax is active to prevent conflicts
          triangle.y += (dy / distance) * influence * 1
          triangle.rotation += influence * 3
          triangle.opacity = Math.min(0.8, triangle.opacity + influence * 0.3)
        } else {
          triangle.opacity = Math.max(0.1, triangle.opacity - 0.01)
          triangle.rotation += triangle.speed
        }

        // Simplified edge wrapping
        if (triangle.x < -30) triangle.x = this.canvas.width + 30
        if (triangle.x > this.canvas.width + 30) triangle.x = -30
        if (triangle.y < -30) triangle.originalY = this.canvas.height + 30
        if (triangle.y > this.canvas.height + 30) triangle.originalY = -30

        this.drawTriangle(triangle)
      })

      this.animationId = requestAnimationFrame(this.animate)
    }

    private setupEventListeners() {
      window.addEventListener('resize', () => this.resize())

      window.addEventListener('mousemove', (event) => {
        const rect = this.canvas.getBoundingClientRect()
        this.mouse.x = event.clientX - rect.left
        this.mouse.y = event.clientY - rect.top
      })

      // Add scroll event listener for parallax effect
      window.addEventListener('scroll', () => {
        this.scrollY = window.scrollY
      })

      // Initialize scroll position
      this.scrollY = window.scrollY
    }

    public destroy() {
      if (this.animationId) {
        cancelAnimationFrame(this.animationId)
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.getElementById('triangle-canvas') as HTMLCanvasElement
    if (canvas) {
      new TriangleBackground(canvas)
    }
  })
</script>
