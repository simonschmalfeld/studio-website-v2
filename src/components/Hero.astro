---
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'

/**
 * Hero Component
 *
 * @description A component that displays a hero section with a title, description, and image
 */
interface Props {
  /**
   * The source URL for the image
   */
  src?: string
}

const { src = '/sunset.jpg' }: Props = Astro.props
---

<section class='hero my-24'>
  <div class='container'>
    <div class='grid grid-cols-1 items-center gap-24 lg:grid-cols-2'>
      <div class='flex flex-col items-center gap-8 md:items-start'>
        <div>
          <h1 class='text-center text-6xl md:text-left lg:text-8xl'>
            <slot><span class='text-gradient uppercase'>Studio Effektiv</span> </slot>
            <h2 class='text-center text-2xl md:text-left'>
              <slot> Web Design & Product Innovation </slot>
            </h2>
          </h1>
        </div>
        <div class='flex flex-col gap-3 min-[500px]:flex-row'>
          <a class='button has-icon' href='https://github.com/incluud/accessible-astro-starter'>
            <Icon name='lucide:star' />
            Contact us
          </a>
          <!-- <a class='button has-icon color-secondary' href='https://accessible-astro.incluud.dev/'>
            <Icon name='lucide:bookmark' />
            Read the docs
          </a> -->
        </div>
      </div>
      <div id='hero-text' class='hero-image-wrapper hidden font-["Domine"] text-xl leading-10 lg:block'>
        <!-- <Image class='hero-image' src={src} alt='' decoding='async' width={800} height={600} loading='eager' /> -->
        <p id='typewriter-text'>
          <span class='cursor'>|</span>
        </p>
      </div>
    </div>
  </div>
</section>

<style lang='scss'>
  h1 {
    text-wrap: unset;
  }

  .hero-image-wrapper {
    display: flex;
    position: relative;
    justify-content: flex-start;
    align-items: flex-start;
    width: 100%;
    height: 100%;
  }

  #typewriter-text {
    width: 100%;
    min-height: 200px; /* Reserve space to prevent layout shift */
    text-align: left;
  }

  .hero-image {
    mask-image: url('/mask.webp');
    -webkit-mask-image: url('/mask.webp');
    mask-position: center;
    -webkit-mask-position: center;
    mask-size: contain;
    -webkit-mask-size: contain;
    mask-repeat: no-repeat;
    -webkit-mask-repeat: no-repeat;
    object-fit: cover;
  }

  .text-gradient {
    background: linear-gradient(
      315deg,
      light-dark(var(--color-primary-200), var(--color-secondary-100)) 25%,
      light-dark(var(--color-secondary-400), var(--color-primary-400))
    );
    background-clip: border-box;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .cursor {
    animation: blink 1s infinite;
    font-weight: normal;
  }

  @keyframes blink {
    0%,
    50% {
      opacity: 1;
    }
    51%,
    100% {
      opacity: 0;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const typewriterElement = document.getElementById('typewriter-text')

    if (!typewriterElement) return

    const text =
      'We are a small studio that specializes in web design, product innovation, and emerging technologies. We can help you create a website for your business, design and develop an MVP for your startup, or explore the possibilities of AI and AR for your upcoming product.'

    let currentIndex = 0
    const typingSpeed = 30 // milliseconds per character

    // Set initial state with invisible text to reserve layout space
    typewriterElement.innerHTML = `<span style="visibility: hidden;">${text}</span><span class="cursor" style="position: absolute; left: 0;">|</span>`

    function typeCharacter() {
      if (currentIndex < text.length && typewriterElement) {
        const typedText = text.substring(0, currentIndex + 1)
        const remainingText = text.substring(currentIndex + 1)
        typewriterElement.innerHTML = `${typedText}<span class="cursor">|</span><span style="visibility: hidden;">${remainingText}</span>`
        currentIndex++
        setTimeout(typeCharacter, typingSpeed)
      } else if (typewriterElement) {
        // Remove cursor after typing is complete
        setTimeout(() => {
          if (typewriterElement) {
            typewriterElement.innerHTML = text
          }
        }, 1000)
      }
    }

    // Start typing after a short delay
    setTimeout(typeCharacter, 500)
  })
</script>
